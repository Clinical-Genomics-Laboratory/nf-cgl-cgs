/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'CONVERT_XLSX_TO_CSV' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'CREATE_DEMULTIPLEX_SAMPLESHEET' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'DRAGEN_DEMULTIPLEX' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
        publishDir = [
            path: { "${params.demux_outdir}/${task.ext.prefix}/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                    filename.equals('versions.yml')     ? null :
                    filename.endsWith('fastq_list.csv') ? null :
                    filename.split('/')[1]
            },
            enabled: params.demux_outdir ? true : false
        ]
    }

    withName: 'DRAGEN_ALIGN' {
        publishDir = [
            [
                path: { "${params.outdir}/DRAGEN_output/${meta.id}/" },
                mode: params.publish_dir_mode,
                saveAs: {
                    filename ->
                        filename.contains('.bw')                            ? filename.split('/')[1] :
                        filename.contains('.bam')                           ? filename.split('/')[1] :
                        filename.contains('.gff3')                          ? filename.split('/')[1] :
                        filename.endsWith('.targeted.json')                 ? filename.split('/')[1] :
                        filename.contains('.cnv_sv.vcf.gz')                 ? filename.split('/')[1] :
                        filename.endsWith('.gc_metrics.csv')                ? filename.split('/')[1] :
                        filename.contains('.repeats.vcf.gz')                ? filename.split('/')[1] :
                        filename.endsWith('.roh_metrics.csv')               ? filename.split('/')[1] :
                        filename.matches(/.*\w{4}_metrics\.csv/)            ? filename.split('/')[1] :
                        filename.contains('.cnv.excluded_intervals.bed.gz') ? filename.split('/')[1] :
                        (!params.joint_genotype_sv &&
                            (
                                filename.contains('.sv.vcf.gz') ||
                                filename.endsWith('sv_metrics.csv')
                            )
                        )                                                   ? filename.split('/')[1] :
                        (!params.joint_genotype_cnv &&
                            (
                                filename.contains('.cnv.vcf.gz') ||
                                filename.endsWith('cnv_metrics.csv')
                            )
                        )                                                   ? filename.split('/')[1] :
                        (!params.joint_genotype_small_variants &&
                            (
                                filename.contains("${meta.id}.vcf.gz") ||
                                filename.contains('.hard-filtered.vcf.gz') ||
                                filename.endsWith('vc_metrics.csv')
                            )
                        )                                                   ? filename.split('/')[1] : null
                }
            ]
        ]
    }

    withName: 'DRAGEN_JOINT_CNV' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'DRAGEN_JOINT_SMALL_VARIANTS' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'DRAGEN_JOINT_SV' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'PARSE_QC_METRICS' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
        publishDir = [
            [
                path: { "${params.outdir}/QC_metrics/" },
                mode: params.publish_dir_mode,
                pattern: "*.xlsx"
            ],
            [
                path: { "${params.outdir}/DRAGEN_output/" },
                mode: params.publish_dir_mode,
                pattern: "*_Genoox.xlsx"
            ],
            [
                path: { "${params.qc_outdir}/DRAGEN_output/*/" },
                mode: params.publish_dir_mode,
                pattern: "*_Genoox.xlsx",
                enabled: params.qc_outdir ? true : false
            ],
            [
                path: { "${params.qc_outdir}/batchdir/${task.ext.prefix}/" },
                mode: params.publish_dir_mode,
                pattern: "*MGI_QC.xlsx",
                enabled: params.qc_outdir ? true : false
            ]
        ]
    }

    withName: 'BCFTOOLS_SPLIT_VCF' {
        publishDir = [
            path: { "${params.outdir}/DRAGEN_output/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz*'
        ]
    }

}
